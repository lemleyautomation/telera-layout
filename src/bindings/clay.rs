/* automatically generated by rust-bindgen 0.71.1 */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(transparent)]
pub struct __BindgenFloat16(pub u16);
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const _HEAP_MAXREQ: i32 = -32;
pub const _HEAPEMPTY: i32 = -1;
pub const _HEAPOK: i32 = -2;
pub const _HEAPBADBEGIN: i32 = -3;
pub const _HEAPBADNODE: i32 = -4;
pub const _HEAPEND: i32 = -5;
pub const _HEAPBADPTR: i32 = -6;
pub const _FREEENTRY: u32 = 0;
pub const _USEDENTRY: u32 = 1;
pub const _ALLOCA_S_THRESHOLD: u32 = 1024;
pub const _ALLOCA_S_STACK_MARKER: u32 = 52428;
pub const _ALLOCA_S_HEAP_MARKER: u32 = 56797;
pub const _ALLOCA_S_MARKER_SIZE: u32 = 16;
pub const _MM_HINT_ET0: u32 = 7;
pub const _MM_HINT_ET1: u32 = 6;
pub const _MM_HINT_T0: u32 = 3;
pub const _MM_HINT_T1: u32 = 2;
pub const _MM_HINT_T2: u32 = 1;
pub const _MM_HINT_NTA: u32 = 0;
pub const _MM_EXCEPT_INVALID: u32 = 1;
pub const _MM_EXCEPT_DENORM: u32 = 2;
pub const _MM_EXCEPT_DIV_ZERO: u32 = 4;
pub const _MM_EXCEPT_OVERFLOW: u32 = 8;
pub const _MM_EXCEPT_UNDERFLOW: u32 = 16;
pub const _MM_EXCEPT_INEXACT: u32 = 32;
pub const _MM_EXCEPT_MASK: u32 = 63;
pub const _MM_MASK_INVALID: u32 = 128;
pub const _MM_MASK_DENORM: u32 = 256;
pub const _MM_MASK_DIV_ZERO: u32 = 512;
pub const _MM_MASK_OVERFLOW: u32 = 1024;
pub const _MM_MASK_UNDERFLOW: u32 = 2048;
pub const _MM_MASK_INEXACT: u32 = 4096;
pub const _MM_MASK_MASK: u32 = 8064;
pub const _MM_ROUND_NEAREST: u32 = 0;
pub const _MM_ROUND_DOWN: u32 = 8192;
pub const _MM_ROUND_UP: u32 = 16384;
pub const _MM_ROUND_TOWARD_ZERO: u32 = 24576;
pub const _MM_ROUND_MASK: u32 = 24576;
pub const _MM_FLUSH_ZERO_MASK: u32 = 32768;
pub const _MM_FLUSH_ZERO_ON: u32 = 32768;
pub const _MM_FLUSH_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_ON: u32 = 64;
pub const _MM_DENORMALS_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_MASK: u32 = 64;
pub type va_list = *mut ::std::os::raw::c_char;
unsafe extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
unsafe extern "C" {
    pub fn __security_init_cookie();
}
unsafe extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
unsafe extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type max_align_t = f64;
pub type __m64 = [::std::os::raw::c_longlong; 1usize];
pub type __v1di = [::std::os::raw::c_longlong; 1usize];
pub type __v2si = [::std::os::raw::c_int; 2usize];
pub type __v4hi = [::std::os::raw::c_short; 4usize];
pub type __v8qi = [::std::os::raw::c_char; 8usize];
pub type __v4si = [::std::os::raw::c_int; 4usize];
pub type __v4sf = [f32; 4usize];
pub type __m128 = [f32; 4usize];
pub type __m128_u = [f32; 4usize];
pub type __v4su = [::std::os::raw::c_uint; 4usize];
pub type __crt_bool = bool;
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo();
}
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
unsafe extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_data_public"]
        [::std::mem::size_of::<__crt_locale_data_public>() - 16usize];
    ["Alignment of __crt_locale_data_public"]
        [::std::mem::align_of::<__crt_locale_data_public>() - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_pctype"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_pctype) - 0usize];
    ["Offset of field: __crt_locale_data_public::_locale_mb_cur_max"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_mb_cur_max) - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_lc_codepage"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_lc_codepage) - 12usize];
};
impl Default for __crt_locale_data_public {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_pointers"][::std::mem::size_of::<__crt_locale_pointers>() - 16usize];
    ["Alignment of __crt_locale_pointers"]
        [::std::mem::align_of::<__crt_locale_pointers>() - 8usize];
    ["Offset of field: __crt_locale_pointers::locinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, locinfo) - 0usize];
    ["Offset of field: __crt_locale_pointers::mbcinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, mbcinfo) - 8usize];
};
impl Default for __crt_locale_pointers {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mbstatet"][::std::mem::size_of::<_Mbstatet>() - 8usize];
    ["Alignment of _Mbstatet"][::std::mem::align_of::<_Mbstatet>() - 4usize];
    ["Offset of field: _Mbstatet::_Wchar"][::std::mem::offset_of!(_Mbstatet, _Wchar) - 0usize];
    ["Offset of field: _Mbstatet::_Byte"][::std::mem::offset_of!(_Mbstatet, _Byte) - 4usize];
    ["Offset of field: _Mbstatet::_State"][::std::mem::offset_of!(_Mbstatet, _State) - 6usize];
};
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
unsafe extern "C" {
    pub fn _calloc_base(_Count: usize, _Size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(
        _Count: ::std::os::raw::c_ulonglong,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _callnewh(_Size: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn _malloc_base(_Size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> usize;
}
unsafe extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> usize;
}
unsafe extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn _aligned_malloc(_Size: usize, _Alignment: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: usize,
        _Offset: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
unsafe extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
unsafe extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
unsafe extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
unsafe extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
unsafe extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
unsafe extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
unsafe extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: usize,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
unsafe extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
unsafe extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
unsafe extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: usize,
        _Dir: *mut wchar_t,
        _DirCount: usize,
        _Filename: *mut wchar_t,
        _FilenameCount: usize,
        _Ext: *mut wchar_t,
        _ExtCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
unsafe extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
unsafe extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
unsafe extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
unsafe extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
unsafe extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
unsafe extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
unsafe extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
unsafe extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _div_t"][::std::mem::size_of::<_div_t>() - 8usize];
    ["Alignment of _div_t"][::std::mem::align_of::<_div_t>() - 4usize];
    ["Offset of field: _div_t::quot"][::std::mem::offset_of!(_div_t, quot) - 0usize];
    ["Offset of field: _div_t::rem"][::std::mem::offset_of!(_div_t, rem) - 4usize];
};
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ldiv_t"][::std::mem::size_of::<_ldiv_t>() - 8usize];
    ["Alignment of _ldiv_t"][::std::mem::align_of::<_ldiv_t>() - 4usize];
    ["Offset of field: _ldiv_t::quot"][::std::mem::offset_of!(_ldiv_t, quot) - 0usize];
    ["Offset of field: _ldiv_t::rem"][::std::mem::offset_of!(_ldiv_t, rem) - 4usize];
};
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _lldiv_t"][::std::mem::size_of::<_lldiv_t>() - 16usize];
    ["Alignment of _lldiv_t"][::std::mem::align_of::<_lldiv_t>() - 8usize];
    ["Offset of field: _lldiv_t::quot"][::std::mem::offset_of!(_lldiv_t, quot) - 0usize];
    ["Offset of field: _lldiv_t::rem"][::std::mem::offset_of!(_lldiv_t, rem) - 8usize];
};
pub type lldiv_t = _lldiv_t;
unsafe extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
unsafe extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
unsafe extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDOUBLE"][::std::mem::size_of::<_LDOUBLE>() - 10usize];
    ["Alignment of _LDOUBLE"][::std::mem::align_of::<_LDOUBLE>() - 1usize];
    ["Offset of field: _LDOUBLE::ld"][::std::mem::offset_of!(_LDOUBLE, ld) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CRT_DOUBLE"][::std::mem::size_of::<_CRT_DOUBLE>() - 8usize];
    ["Alignment of _CRT_DOUBLE"][::std::mem::align_of::<_CRT_DOUBLE>() - 8usize];
    ["Offset of field: _CRT_DOUBLE::x"][::std::mem::offset_of!(_CRT_DOUBLE, x) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CRT_FLOAT"][::std::mem::size_of::<_CRT_FLOAT>() - 4usize];
    ["Alignment of _CRT_FLOAT"][::std::mem::align_of::<_CRT_FLOAT>() - 4usize];
    ["Offset of field: _CRT_FLOAT::f"][::std::mem::offset_of!(_CRT_FLOAT, f) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LONGDOUBLE"][::std::mem::size_of::<_LONGDOUBLE>() - 8usize];
    ["Alignment of _LONGDOUBLE"][::std::mem::align_of::<_LONGDOUBLE>() - 8usize];
    ["Offset of field: _LONGDOUBLE::x"][::std::mem::offset_of!(_LONGDOUBLE, x) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDBL12"][::std::mem::size_of::<_LDBL12>() - 12usize];
    ["Alignment of _LDBL12"][::std::mem::align_of::<_LDBL12>() - 1usize];
    ["Offset of field: _LDBL12::ld12"][::std::mem::offset_of!(_LDBL12, ld12) - 0usize];
};
unsafe extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
unsafe extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> usize;
}
unsafe extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> usize;
}
unsafe extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
unsafe extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: usize,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: usize,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: usize,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
unsafe extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
unsafe extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut usize,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
unsafe extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _heapinfo {
    pub _pentry: *mut ::std::os::raw::c_int,
    pub _size: usize,
    pub _useflag: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _heapinfo"][::std::mem::size_of::<_heapinfo>() - 24usize];
    ["Alignment of _heapinfo"][::std::mem::align_of::<_heapinfo>() - 8usize];
    ["Offset of field: _heapinfo::_pentry"][::std::mem::offset_of!(_heapinfo, _pentry) - 0usize];
    ["Offset of field: _heapinfo::_size"][::std::mem::offset_of!(_heapinfo, _size) - 8usize];
    ["Offset of field: _heapinfo::_useflag"][::std::mem::offset_of!(_heapinfo, _useflag) - 16usize];
};
impl Default for _heapinfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type _HEAPINFO = _heapinfo;
unsafe extern "C" {
    pub fn _alloca(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _get_heap_handle() -> isize;
}
unsafe extern "C" {
    pub fn _heapmin() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _heapwalk(_EntryInfo: *mut _HEAPINFO) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _heapchk() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _resetstkoflw() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _mm_sfence();
}
unsafe extern "C" {
    pub fn _mm_getcsr() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _mm_setcsr(__i: ::std::os::raw::c_uint);
}
pub type __m128d = [f64; 2usize];
pub type __m128i = [::std::os::raw::c_longlong; 2usize];
pub type __m128d_u = [f64; 2usize];
pub type __m128i_u = [::std::os::raw::c_longlong; 2usize];
pub type __v2df = [f64; 2usize];
pub type __v2di = [::std::os::raw::c_longlong; 2usize];
pub type __v8hi = [::std::os::raw::c_short; 8usize];
pub type __v16qi = [::std::os::raw::c_char; 16usize];
pub type __v2du = [::std::os::raw::c_ulonglong; 2usize];
pub type __v8hu = [::std::os::raw::c_ushort; 8usize];
pub type __v16qu = [::std::os::raw::c_uchar; 16usize];
pub type __v16qs = [::std::os::raw::c_schar; 16usize];
pub type __v8hf = [__BindgenFloat16; 8usize];
pub type __m128h = [__BindgenFloat16; 8usize];
pub type __m128h_u = [__BindgenFloat16; 8usize];
pub type __v8bf = u128;
pub type __m128bh = u128;
unsafe extern "C" {
    pub fn _mm_clflush(__p: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn _mm_lfence();
}
unsafe extern "C" {
    pub fn _mm_mfence();
}
unsafe extern "C" {
    pub fn _mm_pause();
}
unsafe extern "C" {
    pub static mut CLAY__ELEMENT_DEFINITION_LATCH: u8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_String {
    pub isStaticallyAllocated: bool,
    pub length: i32,
    pub chars: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_String"][::std::mem::size_of::<Clay_String>() - 16usize];
    ["Alignment of Clay_String"][::std::mem::align_of::<Clay_String>() - 8usize];
    ["Offset of field: Clay_String::isStaticallyAllocated"]
        [::std::mem::offset_of!(Clay_String, isStaticallyAllocated) - 0usize];
    ["Offset of field: Clay_String::length"][::std::mem::offset_of!(Clay_String, length) - 4usize];
    ["Offset of field: Clay_String::chars"][::std::mem::offset_of!(Clay_String, chars) - 8usize];
};
impl Default for Clay_String {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_StringSlice {
    pub length: i32,
    pub chars: *const ::std::os::raw::c_char,
    pub baseChars: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_StringSlice"][::std::mem::size_of::<Clay_StringSlice>() - 24usize];
    ["Alignment of Clay_StringSlice"][::std::mem::align_of::<Clay_StringSlice>() - 8usize];
    ["Offset of field: Clay_StringSlice::length"]
        [::std::mem::offset_of!(Clay_StringSlice, length) - 0usize];
    ["Offset of field: Clay_StringSlice::chars"]
        [::std::mem::offset_of!(Clay_StringSlice, chars) - 8usize];
    ["Offset of field: Clay_StringSlice::baseChars"]
        [::std::mem::offset_of!(Clay_StringSlice, baseChars) - 16usize];
};
impl Default for Clay_StringSlice {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Arena {
    pub nextAllocation: usize,
    pub capacity: usize,
    pub memory: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Arena"][::std::mem::size_of::<Clay_Arena>() - 24usize];
    ["Alignment of Clay_Arena"][::std::mem::align_of::<Clay_Arena>() - 8usize];
    ["Offset of field: Clay_Arena::nextAllocation"]
        [::std::mem::offset_of!(Clay_Arena, nextAllocation) - 0usize];
    ["Offset of field: Clay_Arena::capacity"]
        [::std::mem::offset_of!(Clay_Arena, capacity) - 8usize];
    ["Offset of field: Clay_Arena::memory"][::std::mem::offset_of!(Clay_Arena, memory) - 16usize];
};
impl Default for Clay_Arena {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_Dimensions {
    pub width: f32,
    pub height: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Dimensions"][::std::mem::size_of::<Clay_Dimensions>() - 8usize];
    ["Alignment of Clay_Dimensions"][::std::mem::align_of::<Clay_Dimensions>() - 4usize];
    ["Offset of field: Clay_Dimensions::width"]
        [::std::mem::offset_of!(Clay_Dimensions, width) - 0usize];
    ["Offset of field: Clay_Dimensions::height"]
        [::std::mem::offset_of!(Clay_Dimensions, height) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_Vector2 {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Vector2"][::std::mem::size_of::<Clay_Vector2>() - 8usize];
    ["Alignment of Clay_Vector2"][::std::mem::align_of::<Clay_Vector2>() - 4usize];
    ["Offset of field: Clay_Vector2::x"][::std::mem::offset_of!(Clay_Vector2, x) - 0usize];
    ["Offset of field: Clay_Vector2::y"][::std::mem::offset_of!(Clay_Vector2, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_Color {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Color"][::std::mem::size_of::<Clay_Color>() - 16usize];
    ["Alignment of Clay_Color"][::std::mem::align_of::<Clay_Color>() - 4usize];
    ["Offset of field: Clay_Color::r"][::std::mem::offset_of!(Clay_Color, r) - 0usize];
    ["Offset of field: Clay_Color::g"][::std::mem::offset_of!(Clay_Color, g) - 4usize];
    ["Offset of field: Clay_Color::b"][::std::mem::offset_of!(Clay_Color, b) - 8usize];
    ["Offset of field: Clay_Color::a"][::std::mem::offset_of!(Clay_Color, a) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_BoundingBox {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_BoundingBox"][::std::mem::size_of::<Clay_BoundingBox>() - 16usize];
    ["Alignment of Clay_BoundingBox"][::std::mem::align_of::<Clay_BoundingBox>() - 4usize];
    ["Offset of field: Clay_BoundingBox::x"][::std::mem::offset_of!(Clay_BoundingBox, x) - 0usize];
    ["Offset of field: Clay_BoundingBox::y"][::std::mem::offset_of!(Clay_BoundingBox, y) - 4usize];
    ["Offset of field: Clay_BoundingBox::width"]
        [::std::mem::offset_of!(Clay_BoundingBox, width) - 8usize];
    ["Offset of field: Clay_BoundingBox::height"]
        [::std::mem::offset_of!(Clay_BoundingBox, height) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ElementId {
    pub id: u32,
    pub offset: u32,
    pub baseId: u32,
    pub stringId: Clay_String,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ElementId"][::std::mem::size_of::<Clay_ElementId>() - 32usize];
    ["Alignment of Clay_ElementId"][::std::mem::align_of::<Clay_ElementId>() - 8usize];
    ["Offset of field: Clay_ElementId::id"][::std::mem::offset_of!(Clay_ElementId, id) - 0usize];
    ["Offset of field: Clay_ElementId::offset"]
        [::std::mem::offset_of!(Clay_ElementId, offset) - 4usize];
    ["Offset of field: Clay_ElementId::baseId"]
        [::std::mem::offset_of!(Clay_ElementId, baseId) - 8usize];
    ["Offset of field: Clay_ElementId::stringId"]
        [::std::mem::offset_of!(Clay_ElementId, stringId) - 16usize];
};
impl Default for Clay_ElementId {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_CornerRadius {
    pub topLeft: f32,
    pub topRight: f32,
    pub bottomLeft: f32,
    pub bottomRight: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_CornerRadius"][::std::mem::size_of::<Clay_CornerRadius>() - 16usize];
    ["Alignment of Clay_CornerRadius"][::std::mem::align_of::<Clay_CornerRadius>() - 4usize];
    ["Offset of field: Clay_CornerRadius::topLeft"]
        [::std::mem::offset_of!(Clay_CornerRadius, topLeft) - 0usize];
    ["Offset of field: Clay_CornerRadius::topRight"]
        [::std::mem::offset_of!(Clay_CornerRadius, topRight) - 4usize];
    ["Offset of field: Clay_CornerRadius::bottomLeft"]
        [::std::mem::offset_of!(Clay_CornerRadius, bottomLeft) - 8usize];
    ["Offset of field: Clay_CornerRadius::bottomRight"]
        [::std::mem::offset_of!(Clay_CornerRadius, bottomRight) - 12usize];
};
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_LayoutDirection {
    CLAY_LEFT_TO_RIGHT = 0,
    CLAY_TOP_TO_BOTTOM = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_LayoutAlignmentX {
    CLAY_ALIGN_X_LEFT = 0,
    CLAY_ALIGN_X_RIGHT = 1,
    CLAY_ALIGN_X_CENTER = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_LayoutAlignmentY {
    CLAY_ALIGN_Y_TOP = 0,
    CLAY_ALIGN_Y_BOTTOM = 1,
    CLAY_ALIGN_Y_CENTER = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay__SizingType {
    CLAY__SIZING_TYPE_FIT = 0,
    CLAY__SIZING_TYPE_GROW = 1,
    CLAY__SIZING_TYPE_PERCENT = 2,
    CLAY__SIZING_TYPE_FIXED = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ChildAlignment {
    pub x: Clay_LayoutAlignmentX,
    pub y: Clay_LayoutAlignmentY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ChildAlignment"][::std::mem::size_of::<Clay_ChildAlignment>() - 8usize];
    ["Alignment of Clay_ChildAlignment"][::std::mem::align_of::<Clay_ChildAlignment>() - 4usize];
    ["Offset of field: Clay_ChildAlignment::x"]
        [::std::mem::offset_of!(Clay_ChildAlignment, x) - 0usize];
    ["Offset of field: Clay_ChildAlignment::y"]
        [::std::mem::offset_of!(Clay_ChildAlignment, y) - 4usize];
};
impl Default for Clay_ChildAlignment {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_SizingMinMax {
    pub min: f32,
    pub max: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_SizingMinMax"][::std::mem::size_of::<Clay_SizingMinMax>() - 8usize];
    ["Alignment of Clay_SizingMinMax"][::std::mem::align_of::<Clay_SizingMinMax>() - 4usize];
    ["Offset of field: Clay_SizingMinMax::min"]
        [::std::mem::offset_of!(Clay_SizingMinMax, min) - 0usize];
    ["Offset of field: Clay_SizingMinMax::max"]
        [::std::mem::offset_of!(Clay_SizingMinMax, max) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_SizingAxis {
    pub size: Clay_SizingAxis__bindgen_ty_1,
    pub type_: Clay__SizingType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Clay_SizingAxis__bindgen_ty_1 {
    pub minMax: Clay_SizingMinMax,
    pub percent: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_SizingAxis__bindgen_ty_1"]
        [::std::mem::size_of::<Clay_SizingAxis__bindgen_ty_1>() - 8usize];
    ["Alignment of Clay_SizingAxis__bindgen_ty_1"]
        [::std::mem::align_of::<Clay_SizingAxis__bindgen_ty_1>() - 4usize];
    ["Offset of field: Clay_SizingAxis__bindgen_ty_1::minMax"]
        [::std::mem::offset_of!(Clay_SizingAxis__bindgen_ty_1, minMax) - 0usize];
    ["Offset of field: Clay_SizingAxis__bindgen_ty_1::percent"]
        [::std::mem::offset_of!(Clay_SizingAxis__bindgen_ty_1, percent) - 0usize];
};
impl Default for Clay_SizingAxis__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_SizingAxis"][::std::mem::size_of::<Clay_SizingAxis>() - 12usize];
    ["Alignment of Clay_SizingAxis"][::std::mem::align_of::<Clay_SizingAxis>() - 4usize];
    ["Offset of field: Clay_SizingAxis::size"]
        [::std::mem::offset_of!(Clay_SizingAxis, size) - 0usize];
    ["Offset of field: Clay_SizingAxis::type_"]
        [::std::mem::offset_of!(Clay_SizingAxis, type_) - 8usize];
};
impl Default for Clay_SizingAxis {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_Sizing {
    pub width: Clay_SizingAxis,
    pub height: Clay_SizingAxis,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Sizing"][::std::mem::size_of::<Clay_Sizing>() - 24usize];
    ["Alignment of Clay_Sizing"][::std::mem::align_of::<Clay_Sizing>() - 4usize];
    ["Offset of field: Clay_Sizing::width"][::std::mem::offset_of!(Clay_Sizing, width) - 0usize];
    ["Offset of field: Clay_Sizing::height"][::std::mem::offset_of!(Clay_Sizing, height) - 12usize];
};
impl Default for Clay_Sizing {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_Padding {
    pub left: u16,
    pub right: u16,
    pub top: u16,
    pub bottom: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_Padding"][::std::mem::size_of::<Clay_Padding>() - 8usize];
    ["Alignment of Clay_Padding"][::std::mem::align_of::<Clay_Padding>() - 2usize];
    ["Offset of field: Clay_Padding::left"][::std::mem::offset_of!(Clay_Padding, left) - 0usize];
    ["Offset of field: Clay_Padding::right"][::std::mem::offset_of!(Clay_Padding, right) - 2usize];
    ["Offset of field: Clay_Padding::top"][::std::mem::offset_of!(Clay_Padding, top) - 4usize];
    ["Offset of field: Clay_Padding::bottom"]
        [::std::mem::offset_of!(Clay_Padding, bottom) - 6usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay__Clay_PaddingWrapper {
    pub wrapped: Clay_Padding,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_PaddingWrapper"]
        [::std::mem::size_of::<Clay__Clay_PaddingWrapper>() - 8usize];
    ["Alignment of Clay__Clay_PaddingWrapper"]
        [::std::mem::align_of::<Clay__Clay_PaddingWrapper>() - 2usize];
    ["Offset of field: Clay__Clay_PaddingWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_PaddingWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_LayoutConfig {
    pub sizing: Clay_Sizing,
    pub padding: Clay_Padding,
    pub childGap: u16,
    pub childAlignment: Clay_ChildAlignment,
    pub layoutDirection: Clay_LayoutDirection,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_LayoutConfig"][::std::mem::size_of::<Clay_LayoutConfig>() - 48usize];
    ["Alignment of Clay_LayoutConfig"][::std::mem::align_of::<Clay_LayoutConfig>() - 4usize];
    ["Offset of field: Clay_LayoutConfig::sizing"]
        [::std::mem::offset_of!(Clay_LayoutConfig, sizing) - 0usize];
    ["Offset of field: Clay_LayoutConfig::padding"]
        [::std::mem::offset_of!(Clay_LayoutConfig, padding) - 24usize];
    ["Offset of field: Clay_LayoutConfig::childGap"]
        [::std::mem::offset_of!(Clay_LayoutConfig, childGap) - 32usize];
    ["Offset of field: Clay_LayoutConfig::childAlignment"]
        [::std::mem::offset_of!(Clay_LayoutConfig, childAlignment) - 36usize];
    ["Offset of field: Clay_LayoutConfig::layoutDirection"]
        [::std::mem::offset_of!(Clay_LayoutConfig, layoutDirection) - 44usize];
};
impl Default for Clay_LayoutConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__Clay_LayoutConfigWrapper {
    pub wrapped: Clay_LayoutConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_LayoutConfigWrapper"]
        [::std::mem::size_of::<Clay__Clay_LayoutConfigWrapper>() - 48usize];
    ["Alignment of Clay__Clay_LayoutConfigWrapper"]
        [::std::mem::align_of::<Clay__Clay_LayoutConfigWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_LayoutConfigWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_LayoutConfigWrapper, wrapped) - 0usize];
};
impl Default for Clay__Clay_LayoutConfigWrapper {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub static mut CLAY_LAYOUT_DEFAULT: Clay_LayoutConfig;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_TextElementConfigWrapMode {
    CLAY_TEXT_WRAP_WORDS = 0,
    CLAY_TEXT_WRAP_NEWLINES = 1,
    CLAY_TEXT_WRAP_NONE = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_TextAlignment {
    CLAY_TEXT_ALIGN_LEFT = 0,
    CLAY_TEXT_ALIGN_CENTER = 1,
    CLAY_TEXT_ALIGN_RIGHT = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_TextElementConfig {
    pub userData: *mut ::std::os::raw::c_void,
    pub textColor: Clay_Color,
    pub fontId: u16,
    pub fontSize: u16,
    pub letterSpacing: u16,
    pub lineHeight: u16,
    pub wrapMode: Clay_TextElementConfigWrapMode,
    pub textAlignment: Clay_TextAlignment,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_TextElementConfig"][::std::mem::size_of::<Clay_TextElementConfig>() - 40usize];
    ["Alignment of Clay_TextElementConfig"]
        [::std::mem::align_of::<Clay_TextElementConfig>() - 8usize];
    ["Offset of field: Clay_TextElementConfig::userData"]
        [::std::mem::offset_of!(Clay_TextElementConfig, userData) - 0usize];
    ["Offset of field: Clay_TextElementConfig::textColor"]
        [::std::mem::offset_of!(Clay_TextElementConfig, textColor) - 8usize];
    ["Offset of field: Clay_TextElementConfig::fontId"]
        [::std::mem::offset_of!(Clay_TextElementConfig, fontId) - 24usize];
    ["Offset of field: Clay_TextElementConfig::fontSize"]
        [::std::mem::offset_of!(Clay_TextElementConfig, fontSize) - 26usize];
    ["Offset of field: Clay_TextElementConfig::letterSpacing"]
        [::std::mem::offset_of!(Clay_TextElementConfig, letterSpacing) - 28usize];
    ["Offset of field: Clay_TextElementConfig::lineHeight"]
        [::std::mem::offset_of!(Clay_TextElementConfig, lineHeight) - 30usize];
    ["Offset of field: Clay_TextElementConfig::wrapMode"]
        [::std::mem::offset_of!(Clay_TextElementConfig, wrapMode) - 32usize];
    ["Offset of field: Clay_TextElementConfig::textAlignment"]
        [::std::mem::offset_of!(Clay_TextElementConfig, textAlignment) - 36usize];
};
impl Default for Clay_TextElementConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_TextElementConfigWrapper {
    pub wrapped: Clay_TextElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_TextElementConfigWrapper"]
        [::std::mem::size_of::<Clay__Clay_TextElementConfigWrapper>() - 40usize];
    ["Alignment of Clay__Clay_TextElementConfigWrapper"]
        [::std::mem::align_of::<Clay__Clay_TextElementConfigWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_TextElementConfigWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_TextElementConfigWrapper, wrapped) - 0usize];
};
impl Default for Clay__Clay_TextElementConfigWrapper {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ImageElementConfig {
    pub imageData: *mut ::std::os::raw::c_void,
    pub sourceDimensions: Clay_Dimensions,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ImageElementConfig"][::std::mem::size_of::<Clay_ImageElementConfig>() - 16usize];
    ["Alignment of Clay_ImageElementConfig"]
        [::std::mem::align_of::<Clay_ImageElementConfig>() - 8usize];
    ["Offset of field: Clay_ImageElementConfig::imageData"]
        [::std::mem::offset_of!(Clay_ImageElementConfig, imageData) - 0usize];
    ["Offset of field: Clay_ImageElementConfig::sourceDimensions"]
        [::std::mem::offset_of!(Clay_ImageElementConfig, sourceDimensions) - 8usize];
};
impl Default for Clay_ImageElementConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_ImageElementConfigWrapper {
    pub wrapped: Clay_ImageElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ImageElementConfigWrapper"]
        [::std::mem::size_of::<Clay__Clay_ImageElementConfigWrapper>() - 16usize];
    ["Alignment of Clay__Clay_ImageElementConfigWrapper"]
        [::std::mem::align_of::<Clay__Clay_ImageElementConfigWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_ImageElementConfigWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_ImageElementConfigWrapper, wrapped) - 0usize];
};
impl Default for Clay__Clay_ImageElementConfigWrapper {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_FloatingAttachPointType {
    CLAY_ATTACH_POINT_LEFT_TOP = 0,
    CLAY_ATTACH_POINT_LEFT_CENTER = 1,
    CLAY_ATTACH_POINT_LEFT_BOTTOM = 2,
    CLAY_ATTACH_POINT_CENTER_TOP = 3,
    CLAY_ATTACH_POINT_CENTER_CENTER = 4,
    CLAY_ATTACH_POINT_CENTER_BOTTOM = 5,
    CLAY_ATTACH_POINT_RIGHT_TOP = 6,
    CLAY_ATTACH_POINT_RIGHT_CENTER = 7,
    CLAY_ATTACH_POINT_RIGHT_BOTTOM = 8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_FloatingAttachPoints {
    pub element: Clay_FloatingAttachPointType,
    pub parent: Clay_FloatingAttachPointType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_FloatingAttachPoints"]
        [::std::mem::size_of::<Clay_FloatingAttachPoints>() - 8usize];
    ["Alignment of Clay_FloatingAttachPoints"]
        [::std::mem::align_of::<Clay_FloatingAttachPoints>() - 4usize];
    ["Offset of field: Clay_FloatingAttachPoints::element"]
        [::std::mem::offset_of!(Clay_FloatingAttachPoints, element) - 0usize];
    ["Offset of field: Clay_FloatingAttachPoints::parent"]
        [::std::mem::offset_of!(Clay_FloatingAttachPoints, parent) - 4usize];
};
impl Default for Clay_FloatingAttachPoints {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_PointerCaptureMode {
    CLAY_POINTER_CAPTURE_MODE_CAPTURE = 0,
    CLAY_POINTER_CAPTURE_MODE_PASSTHROUGH = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_FloatingAttachToElement {
    CLAY_ATTACH_TO_NONE = 0,
    CLAY_ATTACH_TO_PARENT = 1,
    CLAY_ATTACH_TO_ELEMENT_WITH_ID = 2,
    CLAY_ATTACH_TO_ROOT = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_FloatingElementConfig {
    pub offset: Clay_Vector2,
    pub expand: Clay_Dimensions,
    pub parentId: u32,
    pub zIndex: i16,
    pub attachPoints: Clay_FloatingAttachPoints,
    pub pointerCaptureMode: Clay_PointerCaptureMode,
    pub attachTo: Clay_FloatingAttachToElement,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_FloatingElementConfig"]
        [::std::mem::size_of::<Clay_FloatingElementConfig>() - 40usize];
    ["Alignment of Clay_FloatingElementConfig"]
        [::std::mem::align_of::<Clay_FloatingElementConfig>() - 4usize];
    ["Offset of field: Clay_FloatingElementConfig::offset"]
        [::std::mem::offset_of!(Clay_FloatingElementConfig, offset) - 0usize];
    ["Offset of field: Clay_FloatingElementConfig::expand"]
        [::std::mem::offset_of!(Clay_FloatingElementConfig, expand) - 8usize];
    ["Offset of field: Clay_FloatingElementConfig::parentId"]
        [::std::mem::offset_of!(Clay_FloatingElementConfig, parentId) - 16usize];
    ["Offset of field: Clay_FloatingElementConfig::zIndex"]
        [::std::mem::offset_of!(Clay_FloatingElementConfig, zIndex) - 20usize];
    ["Offset of field: Clay_FloatingElementConfig::attachPoints"]
        [::std::mem::offset_of!(Clay_FloatingElementConfig, attachPoints) - 24usize];
    ["Offset of field: Clay_FloatingElementConfig::pointerCaptureMode"]
        [::std::mem::offset_of!(Clay_FloatingElementConfig, pointerCaptureMode) - 32usize];
    ["Offset of field: Clay_FloatingElementConfig::attachTo"]
        [::std::mem::offset_of!(Clay_FloatingElementConfig, attachTo) - 36usize];
};
impl Default for Clay_FloatingElementConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_FloatingElementConfigWrapper {
    pub wrapped: Clay_FloatingElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_FloatingElementConfigWrapper"]
        [::std::mem::size_of::<Clay__Clay_FloatingElementConfigWrapper>() - 40usize];
    ["Alignment of Clay__Clay_FloatingElementConfigWrapper"]
        [::std::mem::align_of::<Clay__Clay_FloatingElementConfigWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_FloatingElementConfigWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_FloatingElementConfigWrapper, wrapped) - 0usize];
};
impl Default for Clay__Clay_FloatingElementConfigWrapper {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_CustomElementConfig {
    pub customData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_CustomElementConfig"]
        [::std::mem::size_of::<Clay_CustomElementConfig>() - 8usize];
    ["Alignment of Clay_CustomElementConfig"]
        [::std::mem::align_of::<Clay_CustomElementConfig>() - 8usize];
    ["Offset of field: Clay_CustomElementConfig::customData"]
        [::std::mem::offset_of!(Clay_CustomElementConfig, customData) - 0usize];
};
impl Default for Clay_CustomElementConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_CustomElementConfigWrapper {
    pub wrapped: Clay_CustomElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_CustomElementConfigWrapper"]
        [::std::mem::size_of::<Clay__Clay_CustomElementConfigWrapper>() - 8usize];
    ["Alignment of Clay__Clay_CustomElementConfigWrapper"]
        [::std::mem::align_of::<Clay__Clay_CustomElementConfigWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_CustomElementConfigWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_CustomElementConfigWrapper, wrapped) - 0usize];
};
impl Default for Clay__Clay_CustomElementConfigWrapper {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_ScrollElementConfig {
    pub horizontal: bool,
    pub vertical: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ScrollElementConfig"]
        [::std::mem::size_of::<Clay_ScrollElementConfig>() - 2usize];
    ["Alignment of Clay_ScrollElementConfig"]
        [::std::mem::align_of::<Clay_ScrollElementConfig>() - 1usize];
    ["Offset of field: Clay_ScrollElementConfig::horizontal"]
        [::std::mem::offset_of!(Clay_ScrollElementConfig, horizontal) - 0usize];
    ["Offset of field: Clay_ScrollElementConfig::vertical"]
        [::std::mem::offset_of!(Clay_ScrollElementConfig, vertical) - 1usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay__Clay_ScrollElementConfigWrapper {
    pub wrapped: Clay_ScrollElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ScrollElementConfigWrapper"]
        [::std::mem::size_of::<Clay__Clay_ScrollElementConfigWrapper>() - 2usize];
    ["Alignment of Clay__Clay_ScrollElementConfigWrapper"]
        [::std::mem::align_of::<Clay__Clay_ScrollElementConfigWrapper>() - 1usize];
    ["Offset of field: Clay__Clay_ScrollElementConfigWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_ScrollElementConfigWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_BorderWidth {
    pub left: u16,
    pub right: u16,
    pub top: u16,
    pub bottom: u16,
    pub betweenChildren: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_BorderWidth"][::std::mem::size_of::<Clay_BorderWidth>() - 10usize];
    ["Alignment of Clay_BorderWidth"][::std::mem::align_of::<Clay_BorderWidth>() - 2usize];
    ["Offset of field: Clay_BorderWidth::left"]
        [::std::mem::offset_of!(Clay_BorderWidth, left) - 0usize];
    ["Offset of field: Clay_BorderWidth::right"]
        [::std::mem::offset_of!(Clay_BorderWidth, right) - 2usize];
    ["Offset of field: Clay_BorderWidth::top"]
        [::std::mem::offset_of!(Clay_BorderWidth, top) - 4usize];
    ["Offset of field: Clay_BorderWidth::bottom"]
        [::std::mem::offset_of!(Clay_BorderWidth, bottom) - 6usize];
    ["Offset of field: Clay_BorderWidth::betweenChildren"]
        [::std::mem::offset_of!(Clay_BorderWidth, betweenChildren) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_BorderElementConfig {
    pub color: Clay_Color,
    pub width: Clay_BorderWidth,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_BorderElementConfig"]
        [::std::mem::size_of::<Clay_BorderElementConfig>() - 28usize];
    ["Alignment of Clay_BorderElementConfig"]
        [::std::mem::align_of::<Clay_BorderElementConfig>() - 4usize];
    ["Offset of field: Clay_BorderElementConfig::color"]
        [::std::mem::offset_of!(Clay_BorderElementConfig, color) - 0usize];
    ["Offset of field: Clay_BorderElementConfig::width"]
        [::std::mem::offset_of!(Clay_BorderElementConfig, width) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay__Clay_BorderElementConfigWrapper {
    pub wrapped: Clay_BorderElementConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_BorderElementConfigWrapper"]
        [::std::mem::size_of::<Clay__Clay_BorderElementConfigWrapper>() - 28usize];
    ["Alignment of Clay__Clay_BorderElementConfigWrapper"]
        [::std::mem::align_of::<Clay__Clay_BorderElementConfigWrapper>() - 4usize];
    ["Offset of field: Clay__Clay_BorderElementConfigWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_BorderElementConfigWrapper, wrapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_TextRenderData {
    pub stringContents: Clay_StringSlice,
    pub textColor: Clay_Color,
    pub fontId: u16,
    pub fontSize: u16,
    pub letterSpacing: u16,
    pub lineHeight: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_TextRenderData"][::std::mem::size_of::<Clay_TextRenderData>() - 48usize];
    ["Alignment of Clay_TextRenderData"][::std::mem::align_of::<Clay_TextRenderData>() - 8usize];
    ["Offset of field: Clay_TextRenderData::stringContents"]
        [::std::mem::offset_of!(Clay_TextRenderData, stringContents) - 0usize];
    ["Offset of field: Clay_TextRenderData::textColor"]
        [::std::mem::offset_of!(Clay_TextRenderData, textColor) - 24usize];
    ["Offset of field: Clay_TextRenderData::fontId"]
        [::std::mem::offset_of!(Clay_TextRenderData, fontId) - 40usize];
    ["Offset of field: Clay_TextRenderData::fontSize"]
        [::std::mem::offset_of!(Clay_TextRenderData, fontSize) - 42usize];
    ["Offset of field: Clay_TextRenderData::letterSpacing"]
        [::std::mem::offset_of!(Clay_TextRenderData, letterSpacing) - 44usize];
    ["Offset of field: Clay_TextRenderData::lineHeight"]
        [::std::mem::offset_of!(Clay_TextRenderData, lineHeight) - 46usize];
};
impl Default for Clay_TextRenderData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_RectangleRenderData {
    pub backgroundColor: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_RectangleRenderData"]
        [::std::mem::size_of::<Clay_RectangleRenderData>() - 32usize];
    ["Alignment of Clay_RectangleRenderData"]
        [::std::mem::align_of::<Clay_RectangleRenderData>() - 4usize];
    ["Offset of field: Clay_RectangleRenderData::backgroundColor"]
        [::std::mem::offset_of!(Clay_RectangleRenderData, backgroundColor) - 0usize];
    ["Offset of field: Clay_RectangleRenderData::cornerRadius"]
        [::std::mem::offset_of!(Clay_RectangleRenderData, cornerRadius) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ImageRenderData {
    pub backgroundColor: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
    pub sourceDimensions: Clay_Dimensions,
    pub imageData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ImageRenderData"][::std::mem::size_of::<Clay_ImageRenderData>() - 48usize];
    ["Alignment of Clay_ImageRenderData"][::std::mem::align_of::<Clay_ImageRenderData>() - 8usize];
    ["Offset of field: Clay_ImageRenderData::backgroundColor"]
        [::std::mem::offset_of!(Clay_ImageRenderData, backgroundColor) - 0usize];
    ["Offset of field: Clay_ImageRenderData::cornerRadius"]
        [::std::mem::offset_of!(Clay_ImageRenderData, cornerRadius) - 16usize];
    ["Offset of field: Clay_ImageRenderData::sourceDimensions"]
        [::std::mem::offset_of!(Clay_ImageRenderData, sourceDimensions) - 32usize];
    ["Offset of field: Clay_ImageRenderData::imageData"]
        [::std::mem::offset_of!(Clay_ImageRenderData, imageData) - 40usize];
};
impl Default for Clay_ImageRenderData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_CustomRenderData {
    pub backgroundColor: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
    pub customData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_CustomRenderData"][::std::mem::size_of::<Clay_CustomRenderData>() - 40usize];
    ["Alignment of Clay_CustomRenderData"]
        [::std::mem::align_of::<Clay_CustomRenderData>() - 8usize];
    ["Offset of field: Clay_CustomRenderData::backgroundColor"]
        [::std::mem::offset_of!(Clay_CustomRenderData, backgroundColor) - 0usize];
    ["Offset of field: Clay_CustomRenderData::cornerRadius"]
        [::std::mem::offset_of!(Clay_CustomRenderData, cornerRadius) - 16usize];
    ["Offset of field: Clay_CustomRenderData::customData"]
        [::std::mem::offset_of!(Clay_CustomRenderData, customData) - 32usize];
};
impl Default for Clay_CustomRenderData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_ScrollRenderData {
    pub horizontal: bool,
    pub vertical: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ScrollRenderData"][::std::mem::size_of::<Clay_ScrollRenderData>() - 2usize];
    ["Alignment of Clay_ScrollRenderData"]
        [::std::mem::align_of::<Clay_ScrollRenderData>() - 1usize];
    ["Offset of field: Clay_ScrollRenderData::horizontal"]
        [::std::mem::offset_of!(Clay_ScrollRenderData, horizontal) - 0usize];
    ["Offset of field: Clay_ScrollRenderData::vertical"]
        [::std::mem::offset_of!(Clay_ScrollRenderData, vertical) - 1usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_BorderRenderData {
    pub color: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
    pub width: Clay_BorderWidth,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_BorderRenderData"][::std::mem::size_of::<Clay_BorderRenderData>() - 44usize];
    ["Alignment of Clay_BorderRenderData"]
        [::std::mem::align_of::<Clay_BorderRenderData>() - 4usize];
    ["Offset of field: Clay_BorderRenderData::color"]
        [::std::mem::offset_of!(Clay_BorderRenderData, color) - 0usize];
    ["Offset of field: Clay_BorderRenderData::cornerRadius"]
        [::std::mem::offset_of!(Clay_BorderRenderData, cornerRadius) - 16usize];
    ["Offset of field: Clay_BorderRenderData::width"]
        [::std::mem::offset_of!(Clay_BorderRenderData, width) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union Clay_RenderData {
    pub rectangle: Clay_RectangleRenderData,
    pub text: Clay_TextRenderData,
    pub image: Clay_ImageRenderData,
    pub custom: Clay_CustomRenderData,
    pub border: Clay_BorderRenderData,
    pub scroll: Clay_ScrollRenderData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_RenderData"][::std::mem::size_of::<Clay_RenderData>() - 48usize];
    ["Alignment of Clay_RenderData"][::std::mem::align_of::<Clay_RenderData>() - 8usize];
    ["Offset of field: Clay_RenderData::rectangle"]
        [::std::mem::offset_of!(Clay_RenderData, rectangle) - 0usize];
    ["Offset of field: Clay_RenderData::text"]
        [::std::mem::offset_of!(Clay_RenderData, text) - 0usize];
    ["Offset of field: Clay_RenderData::image"]
        [::std::mem::offset_of!(Clay_RenderData, image) - 0usize];
    ["Offset of field: Clay_RenderData::custom"]
        [::std::mem::offset_of!(Clay_RenderData, custom) - 0usize];
    ["Offset of field: Clay_RenderData::border"]
        [::std::mem::offset_of!(Clay_RenderData, border) - 0usize];
    ["Offset of field: Clay_RenderData::scroll"]
        [::std::mem::offset_of!(Clay_RenderData, scroll) - 0usize];
};
impl Default for Clay_RenderData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ScrollContainerData {
    pub scrollPosition: *mut Clay_Vector2,
    pub scrollContainerDimensions: Clay_Dimensions,
    pub contentDimensions: Clay_Dimensions,
    pub config: Clay_ScrollElementConfig,
    pub found: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ScrollContainerData"]
        [::std::mem::size_of::<Clay_ScrollContainerData>() - 32usize];
    ["Alignment of Clay_ScrollContainerData"]
        [::std::mem::align_of::<Clay_ScrollContainerData>() - 8usize];
    ["Offset of field: Clay_ScrollContainerData::scrollPosition"]
        [::std::mem::offset_of!(Clay_ScrollContainerData, scrollPosition) - 0usize];
    ["Offset of field: Clay_ScrollContainerData::scrollContainerDimensions"]
        [::std::mem::offset_of!(Clay_ScrollContainerData, scrollContainerDimensions) - 8usize];
    ["Offset of field: Clay_ScrollContainerData::contentDimensions"]
        [::std::mem::offset_of!(Clay_ScrollContainerData, contentDimensions) - 16usize];
    ["Offset of field: Clay_ScrollContainerData::config"]
        [::std::mem::offset_of!(Clay_ScrollContainerData, config) - 24usize];
    ["Offset of field: Clay_ScrollContainerData::found"]
        [::std::mem::offset_of!(Clay_ScrollContainerData, found) - 26usize];
};
impl Default for Clay_ScrollContainerData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_ElementData {
    pub boundingBox: Clay_BoundingBox,
    pub found: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ElementData"][::std::mem::size_of::<Clay_ElementData>() - 20usize];
    ["Alignment of Clay_ElementData"][::std::mem::align_of::<Clay_ElementData>() - 4usize];
    ["Offset of field: Clay_ElementData::boundingBox"]
        [::std::mem::offset_of!(Clay_ElementData, boundingBox) - 0usize];
    ["Offset of field: Clay_ElementData::found"]
        [::std::mem::offset_of!(Clay_ElementData, found) - 16usize];
};
#[repr(u8)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_RenderCommandType {
    CLAY_RENDER_COMMAND_TYPE_NONE = 0,
    CLAY_RENDER_COMMAND_TYPE_RECTANGLE = 1,
    CLAY_RENDER_COMMAND_TYPE_BORDER = 2,
    CLAY_RENDER_COMMAND_TYPE_TEXT = 3,
    CLAY_RENDER_COMMAND_TYPE_IMAGE = 4,
    CLAY_RENDER_COMMAND_TYPE_SCISSOR_START = 5,
    CLAY_RENDER_COMMAND_TYPE_SCISSOR_END = 6,
    CLAY_RENDER_COMMAND_TYPE_CUSTOM = 7,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_RenderCommand {
    pub boundingBox: Clay_BoundingBox,
    pub renderData: Clay_RenderData,
    pub userData: *mut ::std::os::raw::c_void,
    pub id: u32,
    pub zIndex: i16,
    pub commandType: Clay_RenderCommandType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_RenderCommand"][::std::mem::size_of::<Clay_RenderCommand>() - 80usize];
    ["Alignment of Clay_RenderCommand"][::std::mem::align_of::<Clay_RenderCommand>() - 8usize];
    ["Offset of field: Clay_RenderCommand::boundingBox"]
        [::std::mem::offset_of!(Clay_RenderCommand, boundingBox) - 0usize];
    ["Offset of field: Clay_RenderCommand::renderData"]
        [::std::mem::offset_of!(Clay_RenderCommand, renderData) - 16usize];
    ["Offset of field: Clay_RenderCommand::userData"]
        [::std::mem::offset_of!(Clay_RenderCommand, userData) - 64usize];
    ["Offset of field: Clay_RenderCommand::id"]
        [::std::mem::offset_of!(Clay_RenderCommand, id) - 72usize];
    ["Offset of field: Clay_RenderCommand::zIndex"]
        [::std::mem::offset_of!(Clay_RenderCommand, zIndex) - 76usize];
    ["Offset of field: Clay_RenderCommand::commandType"]
        [::std::mem::offset_of!(Clay_RenderCommand, commandType) - 78usize];
};
impl Default for Clay_RenderCommand {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_RenderCommandArray {
    pub capacity: i32,
    pub length: i32,
    pub internalArray: *mut Clay_RenderCommand,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_RenderCommandArray"][::std::mem::size_of::<Clay_RenderCommandArray>() - 16usize];
    ["Alignment of Clay_RenderCommandArray"]
        [::std::mem::align_of::<Clay_RenderCommandArray>() - 8usize];
    ["Offset of field: Clay_RenderCommandArray::capacity"]
        [::std::mem::offset_of!(Clay_RenderCommandArray, capacity) - 0usize];
    ["Offset of field: Clay_RenderCommandArray::length"]
        [::std::mem::offset_of!(Clay_RenderCommandArray, length) - 4usize];
    ["Offset of field: Clay_RenderCommandArray::internalArray"]
        [::std::mem::offset_of!(Clay_RenderCommandArray, internalArray) - 8usize];
};
impl Default for Clay_RenderCommandArray {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_PointerDataInteractionState {
    CLAY_POINTER_DATA_PRESSED_THIS_FRAME = 0,
    CLAY_POINTER_DATA_PRESSED = 1,
    CLAY_POINTER_DATA_RELEASED_THIS_FRAME = 2,
    CLAY_POINTER_DATA_RELEASED = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_PointerData {
    pub position: Clay_Vector2,
    pub state: Clay_PointerDataInteractionState,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_PointerData"][::std::mem::size_of::<Clay_PointerData>() - 12usize];
    ["Alignment of Clay_PointerData"][::std::mem::align_of::<Clay_PointerData>() - 4usize];
    ["Offset of field: Clay_PointerData::position"]
        [::std::mem::offset_of!(Clay_PointerData, position) - 0usize];
    ["Offset of field: Clay_PointerData::state"]
        [::std::mem::offset_of!(Clay_PointerData, state) - 8usize];
};
impl Default for Clay_PointerData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_ElementDeclaration {
    pub id: Clay_ElementId,
    pub layout: Clay_LayoutConfig,
    pub backgroundColor: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
    pub image: Clay_ImageElementConfig,
    pub floating: Clay_FloatingElementConfig,
    pub custom: Clay_CustomElementConfig,
    pub scroll: Clay_ScrollElementConfig,
    pub border: Clay_BorderElementConfig,
    pub userData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ElementDeclaration"]
        [::std::mem::size_of::<Clay_ElementDeclaration>() - 216usize];
    ["Alignment of Clay_ElementDeclaration"]
        [::std::mem::align_of::<Clay_ElementDeclaration>() - 8usize];
    ["Offset of field: Clay_ElementDeclaration::id"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, id) - 0usize];
    ["Offset of field: Clay_ElementDeclaration::layout"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, layout) - 32usize];
    ["Offset of field: Clay_ElementDeclaration::backgroundColor"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, backgroundColor) - 80usize];
    ["Offset of field: Clay_ElementDeclaration::cornerRadius"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, cornerRadius) - 96usize];
    ["Offset of field: Clay_ElementDeclaration::image"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, image) - 112usize];
    ["Offset of field: Clay_ElementDeclaration::floating"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, floating) - 128usize];
    ["Offset of field: Clay_ElementDeclaration::custom"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, custom) - 168usize];
    ["Offset of field: Clay_ElementDeclaration::scroll"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, scroll) - 176usize];
    ["Offset of field: Clay_ElementDeclaration::border"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, border) - 180usize];
    ["Offset of field: Clay_ElementDeclaration::userData"]
        [::std::mem::offset_of!(Clay_ElementDeclaration, userData) - 208usize];
};
impl Default for Clay_ElementDeclaration {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__Clay_ElementDeclarationWrapper {
    pub wrapped: Clay_ElementDeclaration,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay__Clay_ElementDeclarationWrapper"]
        [::std::mem::size_of::<Clay__Clay_ElementDeclarationWrapper>() - 216usize];
    ["Alignment of Clay__Clay_ElementDeclarationWrapper"]
        [::std::mem::align_of::<Clay__Clay_ElementDeclarationWrapper>() - 8usize];
    ["Offset of field: Clay__Clay_ElementDeclarationWrapper::wrapped"]
        [::std::mem::offset_of!(Clay__Clay_ElementDeclarationWrapper, wrapped) - 0usize];
};
impl Default for Clay__Clay_ElementDeclarationWrapper {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_ErrorType {
    CLAY_ERROR_TYPE_TEXT_MEASUREMENT_FUNCTION_NOT_PROVIDED = 0,
    CLAY_ERROR_TYPE_ARENA_CAPACITY_EXCEEDED = 1,
    CLAY_ERROR_TYPE_ELEMENTS_CAPACITY_EXCEEDED = 2,
    CLAY_ERROR_TYPE_TEXT_MEASUREMENT_CAPACITY_EXCEEDED = 3,
    CLAY_ERROR_TYPE_DUPLICATE_ID = 4,
    CLAY_ERROR_TYPE_FLOATING_CONTAINER_PARENT_NOT_FOUND = 5,
    CLAY_ERROR_TYPE_PERCENTAGE_OVER_1 = 6,
    CLAY_ERROR_TYPE_INTERNAL_ERROR = 7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ErrorData {
    pub errorType: Clay_ErrorType,
    pub errorText: Clay_String,
    pub userData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ErrorData"][::std::mem::size_of::<Clay_ErrorData>() - 32usize];
    ["Alignment of Clay_ErrorData"][::std::mem::align_of::<Clay_ErrorData>() - 8usize];
    ["Offset of field: Clay_ErrorData::errorType"]
        [::std::mem::offset_of!(Clay_ErrorData, errorType) - 0usize];
    ["Offset of field: Clay_ErrorData::errorText"]
        [::std::mem::offset_of!(Clay_ErrorData, errorText) - 8usize];
    ["Offset of field: Clay_ErrorData::userData"]
        [::std::mem::offset_of!(Clay_ErrorData, userData) - 24usize];
};
impl Default for Clay_ErrorData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ErrorHandler {
    pub errorHandlerFunction:
        ::std::option::Option<unsafe extern "C" fn(errorText: Clay_ErrorData)>,
    pub userData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Clay_ErrorHandler"][::std::mem::size_of::<Clay_ErrorHandler>() - 16usize];
    ["Alignment of Clay_ErrorHandler"][::std::mem::align_of::<Clay_ErrorHandler>() - 8usize];
    ["Offset of field: Clay_ErrorHandler::errorHandlerFunction"]
        [::std::mem::offset_of!(Clay_ErrorHandler, errorHandlerFunction) - 0usize];
    ["Offset of field: Clay_ErrorHandler::userData"]
        [::std::mem::offset_of!(Clay_ErrorHandler, userData) - 8usize];
};
impl Default for Clay_ErrorHandler {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn Clay_MinMemorySize() -> u32;
}
unsafe extern "C" {
    pub fn Clay_CreateArenaWithCapacityAndMemory(
        capacity: usize,
        memory: *mut ::std::os::raw::c_void,
    ) -> Clay_Arena;
}
unsafe extern "C" {
    pub fn Clay_SetPointerState(position: Clay_Vector2, pointerDown: bool);
}
unsafe extern "C" {
    pub fn Clay_Initialize(
        arena: Clay_Arena,
        layoutDimensions: Clay_Dimensions,
        errorHandler: Clay_ErrorHandler,
    ) -> *mut Clay_Context;
}
unsafe extern "C" {
    pub fn Clay_GetCurrentContext() -> *mut Clay_Context;
}
unsafe extern "C" {
    pub fn Clay_SetCurrentContext(context: *mut Clay_Context);
}
unsafe extern "C" {
    pub fn Clay_UpdateScrollContainers(
        enableDragScrolling: bool,
        scrollDelta: Clay_Vector2,
        deltaTime: f32,
    );
}
unsafe extern "C" {
    pub fn Clay_SetLayoutDimensions(dimensions: Clay_Dimensions);
}
unsafe extern "C" {
    pub fn Clay_BeginLayout();
}
unsafe extern "C" {
    pub fn Clay_EndLayout() -> Clay_RenderCommandArray;
}
unsafe extern "C" {
    pub fn Clay_GetElementId(idString: Clay_String) -> Clay_ElementId;
}
unsafe extern "C" {
    pub fn Clay_GetElementIdWithIndex(idString: Clay_String, index: u32) -> Clay_ElementId;
}
unsafe extern "C" {
    pub fn Clay_GetElementData(id: Clay_ElementId) -> Clay_ElementData;
}
unsafe extern "C" {
    pub fn Clay_Hovered() -> bool;
}
unsafe extern "C" {
    pub fn Clay_OnHover(
        onHoverFunction: ::std::option::Option<
            unsafe extern "C" fn(
                elementId: Clay_ElementId,
                pointerData: Clay_PointerData,
                userData: isize,
            ),
        >,
        userData: isize,
    );
}
unsafe extern "C" {
    pub fn Clay_PointerOver(elementId: Clay_ElementId) -> bool;
}
unsafe extern "C" {
    pub fn Clay_GetScrollContainerData(id: Clay_ElementId) -> Clay_ScrollContainerData;
}
unsafe extern "C" {
    pub fn Clay_SetMeasureTextFunction(
        measureTextFunction: ::std::option::Option<
            unsafe extern "C" fn(
                text: Clay_StringSlice,
                config: *mut Clay_TextElementConfig,
                userData: *mut ::std::os::raw::c_void,
            ) -> Clay_Dimensions,
        >,
        userData: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn Clay_SetQueryScrollOffsetFunction(
        queryScrollOffsetFunction: ::std::option::Option<
            unsafe extern "C" fn(
                elementId: u32,
                userData: *mut ::std::os::raw::c_void,
            ) -> Clay_Vector2,
        >,
        userData: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn Clay_RenderCommandArray_Get(
        array: *mut Clay_RenderCommandArray,
        index: i32,
    ) -> *mut Clay_RenderCommand;
}
unsafe extern "C" {
    pub fn Clay_SetDebugModeEnabled(enabled: bool);
}
unsafe extern "C" {
    pub fn Clay_IsDebugModeEnabled() -> bool;
}
unsafe extern "C" {
    pub fn Clay_SetCullingEnabled(enabled: bool);
}
unsafe extern "C" {
    pub fn Clay_GetMaxElementCount() -> i32;
}
unsafe extern "C" {
    pub fn Clay_SetMaxElementCount(maxElementCount: i32);
}
unsafe extern "C" {
    pub fn Clay_GetMaxMeasureTextCacheWordCount() -> i32;
}
unsafe extern "C" {
    pub fn Clay_SetMaxMeasureTextCacheWordCount(maxMeasureTextCacheWordCount: i32);
}
unsafe extern "C" {
    pub fn Clay_ResetMeasureTextCache();
}
unsafe extern "C" {
    pub fn Clay__OpenElement();
}
unsafe extern "C" {
    pub fn Clay__ConfigureOpenElement(config: Clay_ElementDeclaration);
}
unsafe extern "C" {
    pub fn Clay__ConfigureOpenElementPtr(config: *const Clay_ElementDeclaration);
}
unsafe extern "C" {
    pub fn Clay__CloseElement();
}
unsafe extern "C" {
    pub fn Clay__HashString(key: Clay_String, offset: u32, seed: u32) -> Clay_ElementId;
}
unsafe extern "C" {
    pub fn Clay__OpenTextElement(text: Clay_String, textConfig: *mut Clay_TextElementConfig);
}
unsafe extern "C" {
    pub fn Clay__StoreTextElementConfig(
        config: Clay_TextElementConfig,
    ) -> *mut Clay_TextElementConfig;
}
unsafe extern "C" {
    pub fn Clay__GetParentElementId() -> u32;
}
unsafe extern "C" {
    pub static mut Clay__debugViewHighlightColor: Clay_Color;
}
unsafe extern "C" {
    pub static mut Clay__debugViewWidth: u32;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
