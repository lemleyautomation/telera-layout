/* automatically generated by rust-bindgen 0.71.1 */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(transparent)]
pub struct __BindgenFloat16(pub u16);
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const __INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const __INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const __INT_LEAST32_MIN: i64 = -9223372036854775808;
pub const __INT_LEAST32_MAX: u64 = 9223372036854775807;
pub const __UINT_LEAST32_MAX: u32 = 4294967295;
pub const __INT_LEAST16_MIN: i64 = -9223372036854775808;
pub const __INT_LEAST16_MAX: u64 = 9223372036854775807;
pub const __UINT_LEAST16_MAX: u32 = 65535;
pub const __INT_LEAST8_MIN: i64 = -9223372036854775808;
pub const __INT_LEAST8_MAX: u64 = 9223372036854775807;
pub const __UINT_LEAST8_MAX: u32 = 255;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const INT32_MAX: u32 = 2147483647;
pub const INT32_MIN: i32 = -2147483648;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const INT16_MAX: u32 = 32767;
pub const INT16_MIN: i32 = -32768;
pub const UINT16_MAX: u32 = 65535;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST16_MAX: u32 = 32767;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const INT8_MAX: u32 = 127;
pub const INT8_MIN: i32 = -128;
pub const UINT8_MAX: u32 = 255;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST8_MAX: u32 = 127;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST8_MAX: u32 = 127;
pub const UINT_FAST8_MAX: u32 = 255;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const WCHAR_MAX: u32 = 4294967295;
pub const WCHAR_MIN: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const CLAY__DEFAULT_STRUCT: u32 = 0;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type bfloat16_t = u16;
pub type float32_t = f32;
pub type float16_t = __BindgenFloat16;
pub type float64_t = f64;
pub type int8x8_t = [i8; 8usize];
pub type int8x16_t = [i8; 16usize];
pub type int16x4_t = [i16; 4usize];
pub type int16x8_t = [i16; 8usize];
pub type int32x2_t = [i32; 2usize];
pub type int32x4_t = [i32; 4usize];
pub type int64x1_t = [i64; 1usize];
pub type int64x2_t = [i64; 2usize];
pub type uint8x8_t = [u8; 8usize];
pub type uint8x16_t = [u8; 16usize];
pub type uint16x4_t = [u16; 4usize];
pub type uint16x8_t = [u16; 8usize];
pub type uint32x2_t = [u32; 2usize];
pub type uint32x4_t = [u32; 4usize];
pub type uint64x1_t = [u64; 1usize];
pub type uint64x2_t = [u64; 2usize];
pub type float16x4_t = [float16_t; 4usize];
pub type float16x8_t = [float16_t; 8usize];
pub type float32x2_t = [float32_t; 2usize];
pub type float32x4_t = [float32_t; 4usize];
pub type float64x1_t = [float64_t; 1usize];
pub type float64x2_t = [float64_t; 2usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct int8x8x2_t {
    pub val: [int8x8_t; 2usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct int8x16x2_t {
    pub val: [int8x16_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct int16x4x2_t {
    pub val: [int16x4_t; 2usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct int16x8x2_t {
    pub val: [int16x8_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct int32x2x2_t {
    pub val: [int32x2_t; 2usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct int32x4x2_t {
    pub val: [int32x4_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct int64x1x2_t {
    pub val: [int64x1_t; 2usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct int64x2x2_t {
    pub val: [int64x2_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint8x8x2_t {
    pub val: [uint8x8_t; 2usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint8x16x2_t {
    pub val: [uint8x16_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint16x4x2_t {
    pub val: [uint16x4_t; 2usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint16x8x2_t {
    pub val: [uint16x8_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint32x2x2_t {
    pub val: [uint32x2_t; 2usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint32x4x2_t {
    pub val: [uint32x4_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint64x1x2_t {
    pub val: [uint64x1_t; 2usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint64x2x2_t {
    pub val: [uint64x2_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct float16x4x2_t {
    pub val: [float16x4_t; 2usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct float16x8x2_t {
    pub val: [float16x8_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct float32x2x2_t {
    pub val: [float32x2_t; 2usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct float32x4x2_t {
    pub val: [float32x4_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct float64x1x2_t {
    pub val: [float64x1_t; 2usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct float64x2x2_t {
    pub val: [float64x2_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct int8x8x3_t {
    pub val: [int8x8_t; 3usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct int8x16x3_t {
    pub val: [int8x16_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct int16x4x3_t {
    pub val: [int16x4_t; 3usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct int16x8x3_t {
    pub val: [int16x8_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct int32x2x3_t {
    pub val: [int32x2_t; 3usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct int32x4x3_t {
    pub val: [int32x4_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct int64x1x3_t {
    pub val: [int64x1_t; 3usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct int64x2x3_t {
    pub val: [int64x2_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint8x8x3_t {
    pub val: [uint8x8_t; 3usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint8x16x3_t {
    pub val: [uint8x16_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint16x4x3_t {
    pub val: [uint16x4_t; 3usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint16x8x3_t {
    pub val: [uint16x8_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint32x2x3_t {
    pub val: [uint32x2_t; 3usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint32x4x3_t {
    pub val: [uint32x4_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint64x1x3_t {
    pub val: [uint64x1_t; 3usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint64x2x3_t {
    pub val: [uint64x2_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct float16x4x3_t {
    pub val: [float16x4_t; 3usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct float16x8x3_t {
    pub val: [float16x8_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct float32x2x3_t {
    pub val: [float32x2_t; 3usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct float32x4x3_t {
    pub val: [float32x4_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct float64x1x3_t {
    pub val: [float64x1_t; 3usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct float64x2x3_t {
    pub val: [float64x2_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct int8x8x4_t {
    pub val: [int8x8_t; 4usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct int8x16x4_t {
    pub val: [int8x16_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct int16x4x4_t {
    pub val: [int16x4_t; 4usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct int16x8x4_t {
    pub val: [int16x8_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct int32x2x4_t {
    pub val: [int32x2_t; 4usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct int32x4x4_t {
    pub val: [int32x4_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct int64x1x4_t {
    pub val: [int64x1_t; 4usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct int64x2x4_t {
    pub val: [int64x2_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint8x8x4_t {
    pub val: [uint8x8_t; 4usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint8x16x4_t {
    pub val: [uint8x16_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint16x4x4_t {
    pub val: [uint16x4_t; 4usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint16x8x4_t {
    pub val: [uint16x8_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint32x2x4_t {
    pub val: [uint32x2_t; 4usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint32x4x4_t {
    pub val: [uint32x4_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint64x1x4_t {
    pub val: [uint64x1_t; 4usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct uint64x2x4_t {
    pub val: [uint64x2_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct float16x4x4_t {
    pub val: [float16x4_t; 4usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct float16x8x4_t {
    pub val: [float16x8_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct float32x2x4_t {
    pub val: [float32x2_t; 4usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct float32x4x4_t {
    pub val: [float32x4_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct float64x1x4_t {
    pub val: [float64x1_t; 4usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct float64x2x4_t {
    pub val: [float64x2_t; 4usize],
}
pub type bfloat16x4_t = [bfloat16_t; 4usize];
pub type bfloat16x8_t = [bfloat16_t; 8usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct bfloat16x4x2_t {
    pub val: [bfloat16x4_t; 2usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct bfloat16x8x2_t {
    pub val: [bfloat16x8_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct bfloat16x4x3_t {
    pub val: [bfloat16x4_t; 3usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct bfloat16x8x3_t {
    pub val: [bfloat16x8_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct bfloat16x4x4_t {
    pub val: [bfloat16x4_t; 4usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct bfloat16x8x4_t {
    pub val: [bfloat16x8_t; 4usize],
}
pub type poly8_t = u8;
pub type poly16_t = u16;
pub type poly64_t = u64;
pub type poly128_t = __uint128_t;
pub type poly8x8_t = [poly8_t; 8usize];
pub type poly8x16_t = [poly8_t; 16usize];
pub type poly16x4_t = [poly16_t; 4usize];
pub type poly16x8_t = [poly16_t; 8usize];
pub type poly64x1_t = [poly64_t; 1usize];
pub type poly64x2_t = [poly64_t; 2usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly8x8x2_t {
    pub val: [poly8x8_t; 2usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly8x16x2_t {
    pub val: [poly8x16_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly16x4x2_t {
    pub val: [poly16x4_t; 2usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly16x8x2_t {
    pub val: [poly16x8_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly64x1x2_t {
    pub val: [poly64x1_t; 2usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly64x2x2_t {
    pub val: [poly64x2_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly8x8x3_t {
    pub val: [poly8x8_t; 3usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly8x16x3_t {
    pub val: [poly8x16_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly16x4x3_t {
    pub val: [poly16x4_t; 3usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly16x8x3_t {
    pub val: [poly16x8_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly64x1x3_t {
    pub val: [poly64x1_t; 3usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly64x2x3_t {
    pub val: [poly64x2_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly8x8x4_t {
    pub val: [poly8x8_t; 4usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly8x16x4_t {
    pub val: [poly8x16_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly16x4x4_t {
    pub val: [poly16x4_t; 4usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly16x8x4_t {
    pub val: [poly16x8_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly64x1x4_t {
    pub val: [poly64x1_t; 4usize],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct poly64x2x4_t {
    pub val: [poly64x2_t; 4usize],
}
unsafe extern "C" {
    pub static mut CLAY__ELEMENT_DEFINITION_LATCH: u8;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_String {
    pub isStaticallyAllocated: bool,
    pub length: i32,
    pub chars: *const ::std::os::raw::c_char,
}
impl Default for Clay_String {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_StringSlice {
    pub length: i32,
    pub chars: *const ::std::os::raw::c_char,
    pub baseChars: *const ::std::os::raw::c_char,
}
impl Default for Clay_StringSlice {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Arena {
    pub nextAllocation: usize,
    pub capacity: usize,
    pub memory: *mut ::std::os::raw::c_char,
}
impl Default for Clay_Arena {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_Dimensions {
    pub width: f32,
    pub height: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_Vector2 {
    pub x: f32,
    pub y: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_Color {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_BoundingBox {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ElementId {
    pub id: u32,
    pub offset: u32,
    pub baseId: u32,
    pub stringId: Clay_String,
}
impl Default for Clay_ElementId {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_CornerRadius {
    pub topLeft: f32,
    pub topRight: f32,
    pub bottomLeft: f32,
    pub bottomRight: f32,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_LayoutDirection {
    CLAY_LEFT_TO_RIGHT = 0,
    CLAY_TOP_TO_BOTTOM = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_LayoutAlignmentX {
    CLAY_ALIGN_X_LEFT = 0,
    CLAY_ALIGN_X_RIGHT = 1,
    CLAY_ALIGN_X_CENTER = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_LayoutAlignmentY {
    CLAY_ALIGN_Y_TOP = 0,
    CLAY_ALIGN_Y_BOTTOM = 1,
    CLAY_ALIGN_Y_CENTER = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay__SizingType {
    CLAY__SIZING_TYPE_FIT = 0,
    CLAY__SIZING_TYPE_GROW = 1,
    CLAY__SIZING_TYPE_PERCENT = 2,
    CLAY__SIZING_TYPE_FIXED = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ChildAlignment {
    pub x: Clay_LayoutAlignmentX,
    pub y: Clay_LayoutAlignmentY,
}
impl Default for Clay_ChildAlignment {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_SizingMinMax {
    pub min: f32,
    pub max: f32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_SizingAxis {
    pub size: Clay_SizingAxis__bindgen_ty_1,
    pub type_: Clay__SizingType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Clay_SizingAxis__bindgen_ty_1 {
    pub minMax: Clay_SizingMinMax,
    pub percent: f32,
}
impl Default for Clay_SizingAxis__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for Clay_SizingAxis {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_Sizing {
    pub width: Clay_SizingAxis,
    pub height: Clay_SizingAxis,
}
impl Default for Clay_Sizing {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_Padding {
    pub left: u16,
    pub right: u16,
    pub top: u16,
    pub bottom: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay__Clay_PaddingWrapper {
    pub wrapped: Clay_Padding,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_LayoutConfig {
    pub sizing: Clay_Sizing,
    pub padding: Clay_Padding,
    pub childGap: u16,
    pub childAlignment: Clay_ChildAlignment,
    pub layoutDirection: Clay_LayoutDirection,
}
impl Default for Clay_LayoutConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__Clay_LayoutConfigWrapper {
    pub wrapped: Clay_LayoutConfig,
}
impl Default for Clay__Clay_LayoutConfigWrapper {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub static mut CLAY_LAYOUT_DEFAULT: Clay_LayoutConfig;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_TextElementConfigWrapMode {
    CLAY_TEXT_WRAP_WORDS = 0,
    CLAY_TEXT_WRAP_NEWLINES = 1,
    CLAY_TEXT_WRAP_NONE = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_TextAlignment {
    CLAY_TEXT_ALIGN_LEFT = 0,
    CLAY_TEXT_ALIGN_CENTER = 1,
    CLAY_TEXT_ALIGN_RIGHT = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_TextElementConfig {
    pub userData: *mut ::std::os::raw::c_void,
    pub textColor: Clay_Color,
    pub fontId: u16,
    pub fontSize: u16,
    pub letterSpacing: u16,
    pub lineHeight: u16,
    pub wrapMode: Clay_TextElementConfigWrapMode,
    pub textAlignment: Clay_TextAlignment,
}
impl Default for Clay_TextElementConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_TextElementConfigWrapper {
    pub wrapped: Clay_TextElementConfig,
}
impl Default for Clay__Clay_TextElementConfigWrapper {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ImageElementConfig {
    pub imageData: *mut ::std::os::raw::c_void,
    pub sourceDimensions: Clay_Dimensions,
}
impl Default for Clay_ImageElementConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_ImageElementConfigWrapper {
    pub wrapped: Clay_ImageElementConfig,
}
impl Default for Clay__Clay_ImageElementConfigWrapper {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_FloatingAttachPointType {
    CLAY_ATTACH_POINT_LEFT_TOP = 0,
    CLAY_ATTACH_POINT_LEFT_CENTER = 1,
    CLAY_ATTACH_POINT_LEFT_BOTTOM = 2,
    CLAY_ATTACH_POINT_CENTER_TOP = 3,
    CLAY_ATTACH_POINT_CENTER_CENTER = 4,
    CLAY_ATTACH_POINT_CENTER_BOTTOM = 5,
    CLAY_ATTACH_POINT_RIGHT_TOP = 6,
    CLAY_ATTACH_POINT_RIGHT_CENTER = 7,
    CLAY_ATTACH_POINT_RIGHT_BOTTOM = 8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_FloatingAttachPoints {
    pub element: Clay_FloatingAttachPointType,
    pub parent: Clay_FloatingAttachPointType,
}
impl Default for Clay_FloatingAttachPoints {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_PointerCaptureMode {
    CLAY_POINTER_CAPTURE_MODE_CAPTURE = 0,
    CLAY_POINTER_CAPTURE_MODE_PASSTHROUGH = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_FloatingAttachToElement {
    CLAY_ATTACH_TO_NONE = 0,
    CLAY_ATTACH_TO_PARENT = 1,
    CLAY_ATTACH_TO_ELEMENT_WITH_ID = 2,
    CLAY_ATTACH_TO_ROOT = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_FloatingElementConfig {
    pub offset: Clay_Vector2,
    pub expand: Clay_Dimensions,
    pub parentId: u32,
    pub zIndex: i16,
    pub attachPoints: Clay_FloatingAttachPoints,
    pub pointerCaptureMode: Clay_PointerCaptureMode,
    pub attachTo: Clay_FloatingAttachToElement,
}
impl Default for Clay_FloatingElementConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_FloatingElementConfigWrapper {
    pub wrapped: Clay_FloatingElementConfig,
}
impl Default for Clay__Clay_FloatingElementConfigWrapper {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_CustomElementConfig {
    pub customData: *mut ::std::os::raw::c_void,
}
impl Default for Clay_CustomElementConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__Clay_CustomElementConfigWrapper {
    pub wrapped: Clay_CustomElementConfig,
}
impl Default for Clay__Clay_CustomElementConfigWrapper {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_ScrollElementConfig {
    pub horizontal: bool,
    pub vertical: bool,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay__Clay_ScrollElementConfigWrapper {
    pub wrapped: Clay_ScrollElementConfig,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_BorderWidth {
    pub left: u16,
    pub right: u16,
    pub top: u16,
    pub bottom: u16,
    pub betweenChildren: u16,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_BorderElementConfig {
    pub color: Clay_Color,
    pub width: Clay_BorderWidth,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay__Clay_BorderElementConfigWrapper {
    pub wrapped: Clay_BorderElementConfig,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_TextRenderData {
    pub stringContents: Clay_StringSlice,
    pub textColor: Clay_Color,
    pub fontId: u16,
    pub fontSize: u16,
    pub letterSpacing: u16,
    pub lineHeight: u16,
}
impl Default for Clay_TextRenderData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_RectangleRenderData {
    pub backgroundColor: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ImageRenderData {
    pub backgroundColor: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
    pub sourceDimensions: Clay_Dimensions,
    pub imageData: *mut ::std::os::raw::c_void,
}
impl Default for Clay_ImageRenderData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_CustomRenderData {
    pub backgroundColor: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
    pub customData: *mut ::std::os::raw::c_void,
}
impl Default for Clay_CustomRenderData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_ScrollRenderData {
    pub horizontal: bool,
    pub vertical: bool,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_BorderRenderData {
    pub color: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
    pub width: Clay_BorderWidth,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Clay_RenderData {
    pub rectangle: Clay_RectangleRenderData,
    pub text: Clay_TextRenderData,
    pub image: Clay_ImageRenderData,
    pub custom: Clay_CustomRenderData,
    pub border: Clay_BorderRenderData,
    pub scroll: Clay_ScrollRenderData,
}
impl Default for Clay_RenderData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ScrollContainerData {
    pub scrollPosition: *mut Clay_Vector2,
    pub scrollContainerDimensions: Clay_Dimensions,
    pub contentDimensions: Clay_Dimensions,
    pub config: Clay_ScrollElementConfig,
    pub found: bool,
}
impl Default for Clay_ScrollContainerData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Clay_ElementData {
    pub boundingBox: Clay_BoundingBox,
    pub found: bool,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_RenderCommandType {
    CLAY_RENDER_COMMAND_TYPE_NONE = 0,
    CLAY_RENDER_COMMAND_TYPE_RECTANGLE = 1,
    CLAY_RENDER_COMMAND_TYPE_BORDER = 2,
    CLAY_RENDER_COMMAND_TYPE_TEXT = 3,
    CLAY_RENDER_COMMAND_TYPE_IMAGE = 4,
    CLAY_RENDER_COMMAND_TYPE_SCISSOR_START = 5,
    CLAY_RENDER_COMMAND_TYPE_SCISSOR_END = 6,
    CLAY_RENDER_COMMAND_TYPE_CUSTOM = 7,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_RenderCommand {
    pub boundingBox: Clay_BoundingBox,
    pub renderData: Clay_RenderData,
    pub userData: *mut ::std::os::raw::c_void,
    pub id: u32,
    pub zIndex: i16,
    pub commandType: Clay_RenderCommandType,
}
impl Default for Clay_RenderCommand {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_RenderCommandArray {
    pub capacity: i32,
    pub length: i32,
    pub internalArray: *mut Clay_RenderCommand,
}
impl Default for Clay_RenderCommandArray {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_PointerDataInteractionState {
    CLAY_POINTER_DATA_PRESSED_THIS_FRAME = 0,
    CLAY_POINTER_DATA_PRESSED = 1,
    CLAY_POINTER_DATA_RELEASED_THIS_FRAME = 2,
    CLAY_POINTER_DATA_RELEASED = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_PointerData {
    pub position: Clay_Vector2,
    pub state: Clay_PointerDataInteractionState,
}
impl Default for Clay_PointerData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_ElementDeclaration {
    pub id: Clay_ElementId,
    pub layout: Clay_LayoutConfig,
    pub backgroundColor: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
    pub image: Clay_ImageElementConfig,
    pub floating: Clay_FloatingElementConfig,
    pub custom: Clay_CustomElementConfig,
    pub scroll: Clay_ScrollElementConfig,
    pub border: Clay_BorderElementConfig,
    pub userData: *mut ::std::os::raw::c_void,
}
impl Default for Clay_ElementDeclaration {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay__Clay_ElementDeclarationWrapper {
    pub wrapped: Clay_ElementDeclaration,
}
impl Default for Clay__Clay_ElementDeclarationWrapper {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum Clay_ErrorType {
    CLAY_ERROR_TYPE_TEXT_MEASUREMENT_FUNCTION_NOT_PROVIDED = 0,
    CLAY_ERROR_TYPE_ARENA_CAPACITY_EXCEEDED = 1,
    CLAY_ERROR_TYPE_ELEMENTS_CAPACITY_EXCEEDED = 2,
    CLAY_ERROR_TYPE_TEXT_MEASUREMENT_CAPACITY_EXCEEDED = 3,
    CLAY_ERROR_TYPE_DUPLICATE_ID = 4,
    CLAY_ERROR_TYPE_FLOATING_CONTAINER_PARENT_NOT_FOUND = 5,
    CLAY_ERROR_TYPE_PERCENTAGE_OVER_1 = 6,
    CLAY_ERROR_TYPE_INTERNAL_ERROR = 7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ErrorData {
    pub errorType: Clay_ErrorType,
    pub errorText: Clay_String,
    pub userData: *mut ::std::os::raw::c_void,
}
impl Default for Clay_ErrorData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ErrorHandler {
    pub errorHandlerFunction:
        ::std::option::Option<unsafe extern "C" fn(errorText: Clay_ErrorData)>,
    pub userData: *mut ::std::os::raw::c_void,
}
impl Default for Clay_ErrorHandler {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn Clay_MinMemorySize() -> u32;
}
unsafe extern "C" {
    pub fn Clay_CreateArenaWithCapacityAndMemory(
        capacity: usize,
        memory: *mut ::std::os::raw::c_void,
    ) -> Clay_Arena;
}
unsafe extern "C" {
    pub fn Clay_SetPointerState(position: Clay_Vector2, pointerDown: bool);
}
unsafe extern "C" {
    pub fn Clay_Initialize(
        arena: Clay_Arena,
        layoutDimensions: Clay_Dimensions,
        errorHandler: Clay_ErrorHandler,
    ) -> *mut Clay_Context;
}
unsafe extern "C" {
    pub fn Clay_GetCurrentContext() -> *mut Clay_Context;
}
unsafe extern "C" {
    pub fn Clay_SetCurrentContext(context: *mut Clay_Context);
}
unsafe extern "C" {
    pub fn Clay_UpdateScrollContainers(
        enableDragScrolling: bool,
        scrollDelta: Clay_Vector2,
        deltaTime: f32,
    );
}
unsafe extern "C" {
    pub fn Clay_SetLayoutDimensions(dimensions: Clay_Dimensions);
}
unsafe extern "C" {
    pub fn Clay_BeginLayout();
}
unsafe extern "C" {
    pub fn Clay_EndLayout() -> Clay_RenderCommandArray;
}
unsafe extern "C" {
    pub fn Clay_GetElementId(idString: Clay_String) -> Clay_ElementId;
}
unsafe extern "C" {
    pub fn Clay_GetElementIdWithIndex(idString: Clay_String, index: u32) -> Clay_ElementId;
}
unsafe extern "C" {
    pub fn Clay_GetElementData(id: Clay_ElementId) -> Clay_ElementData;
}
unsafe extern "C" {
    pub fn Clay_Hovered() -> bool;
}
unsafe extern "C" {
    pub fn Clay_OnHover(
        onHoverFunction: ::std::option::Option<
            unsafe extern "C" fn(
                elementId: Clay_ElementId,
                pointerData: Clay_PointerData,
                userData: isize,
            ),
        >,
        userData: isize,
    );
}
unsafe extern "C" {
    pub fn Clay_PointerOver(elementId: Clay_ElementId) -> bool;
}
unsafe extern "C" {
    pub fn Clay_GetScrollContainerData(id: Clay_ElementId) -> Clay_ScrollContainerData;
}
unsafe extern "C" {
    pub fn Clay_SetMeasureTextFunction(
        measureTextFunction: ::std::option::Option<
            unsafe extern "C" fn(
                text: Clay_StringSlice,
                config: *mut Clay_TextElementConfig,
                userData: *mut ::std::os::raw::c_void,
            ) -> Clay_Dimensions,
        >,
        userData: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn Clay_SetQueryScrollOffsetFunction(
        queryScrollOffsetFunction: ::std::option::Option<
            unsafe extern "C" fn(
                elementId: u32,
                userData: *mut ::std::os::raw::c_void,
            ) -> Clay_Vector2,
        >,
        userData: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn Clay_RenderCommandArray_Get(
        array: *mut Clay_RenderCommandArray,
        index: i32,
    ) -> *mut Clay_RenderCommand;
}
unsafe extern "C" {
    pub fn Clay_SetDebugModeEnabled(enabled: bool);
}
unsafe extern "C" {
    pub fn Clay_IsDebugModeEnabled() -> bool;
}
unsafe extern "C" {
    pub fn Clay_SetCullingEnabled(enabled: bool);
}
unsafe extern "C" {
    pub fn Clay_GetMaxElementCount() -> i32;
}
unsafe extern "C" {
    pub fn Clay_SetMaxElementCount(maxElementCount: i32);
}
unsafe extern "C" {
    pub fn Clay_GetMaxMeasureTextCacheWordCount() -> i32;
}
unsafe extern "C" {
    pub fn Clay_SetMaxMeasureTextCacheWordCount(maxMeasureTextCacheWordCount: i32);
}
unsafe extern "C" {
    pub fn Clay_ResetMeasureTextCache();
}
unsafe extern "C" {
    pub fn Clay__OpenElement();
}
unsafe extern "C" {
    pub fn Clay__ConfigureOpenElement(config: Clay_ElementDeclaration);
}
unsafe extern "C" {
    pub fn Clay__ConfigureOpenElementPtr(config: *const Clay_ElementDeclaration);
}
unsafe extern "C" {
    pub fn Clay__CloseElement();
}
unsafe extern "C" {
    pub fn Clay__HashString(key: Clay_String, offset: u32, seed: u32) -> Clay_ElementId;
}
unsafe extern "C" {
    pub fn Clay__OpenTextElement(text: Clay_String, textConfig: *mut Clay_TextElementConfig);
}
unsafe extern "C" {
    pub fn Clay__StoreTextElementConfig(
        config: Clay_TextElementConfig,
    ) -> *mut Clay_TextElementConfig;
}
unsafe extern "C" {
    pub fn Clay__GetParentElementId() -> u32;
}
unsafe extern "C" {
    pub static mut Clay__debugViewHighlightColor: Clay_Color;
}
unsafe extern "C" {
    pub static mut Clay__debugViewWidth: u32;
}
pub type __uint128_t = u128;
